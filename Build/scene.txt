# Scene description file for Atrc Launcher

film = {
    size = (600, 900);
    filter = {
        type = Box;
        sidelen = 1;
    };
};

sampler = {
    type = Native;
    spp = 1;
};

camera = {
    type = Pinhole;
    sensorWidth = 1;
    sensorDistance = 1;
    pos = (-7, 0, 1);
    lookAt = (0, 0, 1.5);
    up = (0, 0, 1);
};

renderer = {
    type = PathTracing;
    integrator = {
        type = MISPathTracing;
        minDepth = 10;
        maxDepth = 20;
        contProb = 0.9;
        sampleAllLights = True;
    };
    workerCount = -1;
    taskGridSize = 16;
};

outputFilename = "./Output.png";

reporter = { type = Default; };

mat = {
    type = IdealDiffuse;
    albedo = {
        type = Constant;
        texel = (0.8);
    };
};

entities = (
###{
    type = Geometric;
    geometry = {
        type = Sphere;
        radius = 200;
        transform = (Translate(0, 0, -201));
    };
    material = mat;
},###
{
    type = GeometricDiffuse;
    geometry = {
        type = Sphere;
        radius = 0.4;
        transform = (Translate(-3, 3, 2.5));
    };
    radiance = (50);
},
###{
    type = GeometricDiffuse;
    geometry = {
        type = Sphere;
        radius = 0.4;
        transform = (Translate(-4, -4, 2.5));
    };
    radiance = (20);
},###
{
    type = Geometric;
    geometry = {
        type = Triangle;
        A = (-2, -2, 0);
        B = (-2, 2, 0);
        C = (2, 2, 0);
        tA = (0, 0); tB = (0, 1); tC = (1, 1);
        transform = (Translate(0, 0, -1));
    };
    material = mat;
},
{
    type = Geometric;
    geometry = {
        type = Triangle;
        A = (-2, -2, 0);
        B = (2, 2, 0);
        C = (2, -2, 0);
        tA = (0, 0); tB = (1, 1); tC = (1, 0);
        transform = (Translate(0, 0, -1));
    };
    material = mat;
},
{
    type = Geometric;
    geometry = {
        type = TriangleBVH;
        filename = "./Asset/4.obj";
        transform = (Translate(0, 0.4, 1.8), RotateZ(Deg(-90)), RotateX(Deg(90)), Scale(0.0035), Translate(-1300, -800, -1800));
    };
    material = {
        type = IdealDiffuse;
        albedo = {
            type = Image;
            filename = "./Asset/8.png";
        };
        normalMapper = {
            type = Image;
            filename = "./Asset/9.png";
        };
    };
}
);

blackTexture = {
    type = Constant1;
    texel = 0;
};

lights = (
###{
    type = Sky;
    top = (0.1);
    bottom = (0.1);
}###
);

postProcessors = (
    { type = FlipImage; }
);
